=== Sobre Controle de Versão

(((version control)))
O que é "controle de versão", e porque eu deveria me importar?

Controle de versão é um sistema que registra alterações em um arquivo ou conjunto de arquivos ao longo do tempo para que você possa lembrar versões específicas mais tarde.
Para os exemplos neste livro que você irá usar o código-fonte de software como os arquivos que estão sendo versão controlada, embora na realidade você pode fazer isso com quase qualquer tipo de arquivo em um computador.

Se você é um designer gráfico ou web designer e quer manter todas as versões de uma imagem ou layout (o que você certamente deveria querer), um sistema de controle de versão (VCS) é a coisa correta a ser usada.
Ele permite que você reverta arquivos de volta para um estado anterior, reverta todo o projeto de volta para um estado anterior, compare as mudanças ao longo do tempo, veja quem modificou pela última algo que pode estar causando um problema, quem introduziu um problema, quando, e muito mais.
Usar um VCS também significa que se você estragar tudo ou perder arquivos, você pode facilmente recuperar.
Além disso, você tem tudo isso por muito pouca sobrecarga.

==== Sistemas Locais de Controle de Versão

(((version control,local)))
O método de controle de versão de muitas pessoas é copiar os arquivos para outro diretório (talvez um diretório com carimbo de tempo, se eles forem espertos).
Esta abordagem é muito comum, porque é tão simples, mas também é incrivelmente propenso a erros.
É fácil esquecer em qual diretório você está e acidentalmente sobreescrever o arquivo errado ou copiar arquivos que não quer.

Para lidar com este problema, programadores há muito tempo desenvolveram VCSs locais que tem um banco de dados simples que mantêm todas as alterações nos arquivos sob controle de revisão.

.Controle de versão local.
image::images/local.png[Local version control diagram]

Uma das ferramentas VCS mais populares foi um sistema chamado RCS, que ainda é distribuído com muitos computadores hoje.
Até mesmo o popular sistema operacional Mac OS X inclui o comando `rcs` quando você instala as Ferramentas de Desenvolvimento.
RCS funciona mantendo conjuntos de alterações (ou seja, as diferenças entre os arquivos) em um formato especial no disco; ele pode, em seguida, re-criar como qualquer arquivo se parecia em qualquer ponto no tempo, adicionando-se todas as alterações.

==== Systemas Centralizados de Controle de Versão

(((version control,centralized)))
A próxima questão importante que as pessoas encontram é que elas precisam colaborar com desenvolvedores em outros sistemas.
Para lidar com este problema, Sistemas Centralizados de Controle de Versão (CVCSs) foram desenvolvidos.
Estes sistemas, tais como CVS, Subversion e Perforce, têm um único servidor que contém todos os arquivos de controle de versão, e um número de clientes que usam arquivos a partir desse lugar central. (((CVS))) (((Subversion))) (((Perforce)))
Por muitos anos, este tem sido o padrão para controle de versão.

.Controle de versão centralizado.
image::images/centralized.png[Centralized version control diagram]

Esta configuração oferece muitas vantagens, especialmente sobre VCSs locais.
Por exemplo, todo mundo sabe, até certo ponto o que todo mundo no projeto está fazendo.
Os administradores têm controle refinado sobre quem pode fazer o que; e é muito mais fácil de administrar um CVCS do que lidar com bancos de dados locais em cada cliente.

No entanto, esta configuração também tem algumas desvantagens graves.
O mais óbvio é o ponto único de falha que o servidor centralizado representa.
Se esse servidor der problema por uma hora, durante essa hora ninguém pode colaborar ou salvar as alterações de versão para o que quer que eles estejam trabalhando.
Se o disco rígido do banco de dados central for corrompido, e backups apropriados não foram mantidos, você perde absolutamente tudo - toda a história do projeto, exceto imagens pontuais que desenvolvedores possam ter em suas máquinas locais.
Sistemas VCS locais sofrem com esse mesmo problema - sempre que você tenha toda a história do projeto em um único lugar, há o risco de perder tudo.

==== Sistemas Distribuídos de Controle de Versão

(((version control,distributed)))
É aqui que Sistemas Distribuídos de Controle de Versão (DVCS) entram em cena.
Em um DVCS (como Git, Mercurial, Bazaar ou Darcs), clientes não somente usam o estado mais recente dos arquivos: eles duplicam localmente repositório completo.
Assim, se qualquer servidor morrer, e esses sistemas estiverem colaborando por meio dele, qualquer um dos repositórios de clientes podem ser copiado de volta para o servidor para restaurá-lo.
Cada clone é de fato um backup completo de todos os dados.

.Controle de versão distribuído.
image::images/distributed.png[Distributed version control diagram]

Além disso, muitos desses sistemas trabalham muito bem com vários repositórios remotos, tal que você possa colaborar em diferentes grupos de pessoas de maneiras diferentes ao mesmo tempo dentro do mesmo projeto.
Isso permite que você configure vários tipos de fluxos de trabalho que não são possíveis em sistemas centralizados, como modelos hierárquicos.
