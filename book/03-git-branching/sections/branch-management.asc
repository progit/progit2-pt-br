[[r_branch_management]]
=== Branch Management

(((branches, managing)))
Now that you've created, merged, and deleted some branches, let's look at some branch-management tools that will come in handy when you begin using branches all the time.

The `git branch` command does more than just create and delete branches.(((git commands, branch)))
If you run it with no arguments, you get a simple listing of your current branches:

[source,console]
----
$ git branch
  iss53
* master
  testing
----

Notice the `*` character that prefixes the `master` branch: it indicates the branch that you currently have checked out (i.e., the branch that `HEAD` points to).
This means that if you commit at this point, the `master` branch will be moved forward with your new work.
To see the last commit on each branch, you can run `git branch -v`:

[source,console]
----
$ git branch -v
  iss53   93b412c Fix javascript issue
* master  7a98805 Merge branch 'iss53'
  testing 782fd34 Add scott to the author list in the readme
----

The useful `--merged` and `--no-merged` options can filter this list to branches that you have or have not yet merged into the branch you're currently on.
To see which branches are already merged into the branch you're on, you can run `git branch --merged`:

[source,console]
----
$ git branch --merged
  iss53
* master
----

Because you already merged in `iss53` earlier, you see it in your list.
Branches on this list without the `*` in front of them are generally fine to delete with `git branch -d`; you've already incorporated their work into another branch, so you're not going to lose anything.

To see all the branches that contain work you haven't yet merged in, you can run `git branch --no-merged`:

[source,console]
----
$ git branch --no-merged
  testing
----

This shows your other branch.
Because it contains work that isn't merged in yet, trying to delete it with `git branch -d` will fail:

[source,console]
----
$ git branch -d testing
error: The branch 'testing' is not fully merged.
If you are sure you want to delete it, run 'git branch -D testing'.
----

If you really do want to delete the branch and lose that work, you can force it with `-D`, as the helpful message points out.

[TIP]
====
The options described above, `--merged` and `--no-merged` will, if not given a commit or branch name as an argument, show you what is, respectively, merged or not merged into your _current_ branch.

You can always provide an additional argument to ask about the merge state with respect to some other branch without checking  that other branch out first, as in, what is not merged into the `master` branch?
[source,console]
----
$ git checkout testing
$ git branch --no-merged master
  topicA
  featureB
----
====
