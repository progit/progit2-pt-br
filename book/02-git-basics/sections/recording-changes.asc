=== Gravando Alterações Em Seu Repositório

Você tem um verdadeiro repositório Git e um "checkout" ou cópia de trabalho dos arquivos para aquele projeto.
Você precisa fazer algumas alterações e adicionar commits dessas alterações em seu repositório a cada vez que o projeto chegar a um estado que você queira registrar.

Lembre-se que cada arquivo em seu diretório de trabalho pode estar em um dos seguintes estados: rastreado e não-rastreado.
Arquivos rastreados são arquivos que foram incluídos no último _snapshot_; eles podem ser não modificados, modificados ou preparados (adicionados ao _stage_).
Em resumo, arquivos rastreados são os arquivos que o Git conhece.

Arquivos não rastreados são todos os outros - quaisquer arquivos em seu diretório de trabalho que não foram incluídos em seu último snapshot e não estão na área de stage.
Quando você clona um repositório pela primeira vez, todos os seus arquivos serão rastreados e não modificados já que o Git acabou de obtê-los e você ainda não editou nada.

Assim que você edita alguns arquivos, Git os considera modificados, porque você os editou desde o seu último commit.
Você preparar os arquivos editados e então faz commit das suas alterações, e o ciclo se repete.

.O ciclo de vida dos status de seus arquivos.
image::images/lifecycle.png[The lifecycle of the status of your files.]

[[r_checking_status]]
==== Verificando os Status de Seus Arquivos

A principal ferramenta que você vai usar para determinar quais arquivos estão em qual estado é o comando `git status`.(((git commands, status)))
Se você executar esse comando imediatamente após clonar um repositório, você vai ver algo assim:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

Isso significa que você tem um diretório de trabalho limpo - em outras palavras, nenhum de seus arquivos rastreados foi modificado.
Git também não está vendo nenhum arquivo não rastreado, senão eles estariam listados aqui.
Finalmente, o comando lhe diz qual o branch que você está e diz que ele não divergiu do mesmo branch no servidor.
Por enquanto, esse branch é sempre ``master'', que é o padrão; você não precisa se preocupar com isso agora.
<<ch03-git-branching#ch03-git-branching>> vai abordar branches e referências em detalhe.

Digamos que você adiciona um novo arquivo no seu projeto, um simples arquivo README.
Se o arquivo não existia antes, e você executar `git status`, você verá seu arquivo não rastreado da seguinte forma:

[source,console]
----
$ echo 'My Project' > README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    README

nothing added to commit but untracked files present (use "git add" to track)
----

Você pode ver que o seu novo arquivo README é um arquivo não rastreado, porque está abaixo do subtítulo ``Untracked files'' na saída do seu status.
"Não rastreado" basicamente significa que o Git vê um arquivo que você não tinha no snapshot (commit) anterior; o Git não vai passar a incluir o arquivo nos seus commits a não ser que você o mande fazer isso explicitamente.
O comportamento do Git é dessa forma para que você não inclua acidentalmente arquivos binários gerados automaticamente ou outros arquivos que você não deseja incluir.
Você _quer_ incluir o arquivo README, então vamos comeaçar a rastreá-lo.

[[r_tracking_files]]
==== Rastreando Arquivos Novos

Para começar a rastrear um novo arquivo, você deve usar o comando `git add`.(((git commands, add)))
Para começar começar a rastrear o arquivo README, você deve executar o seguinte:

[source,console]
----
$ git add README
----

Executando o comando _status_ novamente, você pode ver que seu README agora está sendo rastreado e preparado (_staged_) para o _commit_:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

----

É possível saber que o arquivo está preparado porque ele aparece sob o título ``Changes to be committed''.
Se você fizer um _commit_ neste momento, a versão do arquivo que existia no instante em que você executou `git add`, é a que será armazenada no histórico de _snapshots_.
Você deve se lembrar que, quando executou `git init` anteriormente, em seguida, você também executou `git add (arquivos)` - isso foi para começar a rastrear os arquivos em seu diretório.(((git commands, init)))(((git commands, add)))
O comando `git add` recebe o caminho de um arquivo ou de um diretório. Se for um diretório, o comando adiciona todos os arquivos contidos nesse diretório recursivamente.

==== Preparando Arquivos Modificados

Vamos modificar um arquivo que já estava sendo rastreado.
Se você modificar o arquivo `CONTRIBUTING.md`, que já era rastreado, e então executar `git status` novamente, você deve ver algo como:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

O arquivo `CONTRIBUTING.md` aparece sob a seção ``Changes not staged for commit'' -- que indica que um arquivo rastreado foi modificado no diretório de trabalho mas ainda não foi mandado para o _stage_ (preparado).
Para mandá-lo para o _stage_, você precisa executar o comando `git add`.
O `git add` é um comando de múltiplos propósitos: serve para começar a rastrear arquivos e também para outras coisas, como marcar arquivos que estão em conflito de mesclagem como resolvidos.
Pode ser útil pensar nesse comando mais como ``adicione este conteúdo ao próximo _commit_''.(((git commands, add)))
Vamos executar `git add` agora, para mandar o arquivo `CONTRIBUTING.md` para o _stage_, e então executar `git status` novamente:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

Ambos os arquivos estão preparados (no _stage_) e entrarão no seu próximo _commit_.
Neste momento, suponha que você se lembre de uma pequena mudança que quer fazer no arquivo `CONTRIBUTING.md` antes de fazer o _commit_.
Você abre o arquivo, faz a mudança e está pronto para fazer o _commit_.
No entanto, vamos executar `git status` mais uma vez:

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

Que negócio é esse?
Agora o `CONTRIBUTING.md` está listado como preparado (_staged_) e também como não-preparado (_unstaged_).
Como isso é possível?
Acontece que o Git põe um arquivo no _stage_ exatamente como ele está no momento em que você executa o comando `git add`.
Se você executar `git commit` agora, a versão do `CONTRIBUTING.md` que vai para o repositório é aquela de quando você executou `git add`, não a versão que está no seu diretório de trabalho.
Se você modificar um arquivo depois de executar `git add`, você tem que executar `git add` de novo para por sua versão mais recente no _stage_:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
----

==== Status Curto

Ao mesmo tempo que a saída do `git status` é bem completa, ela também é bastante verbosa.
O Git também tem uma _flag_ para status curto, que permite que você veja suas alterações de forma mais compacta.
Se você executar `git status -s` ou `git status --short` a saída do comando vai ser bem mais simples:

[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

Arquivos novos que não são rastreados têm um `??` do lado, novos arquivos que foram adicionados à área de _stage_ têm um `A`, arquivos modificados têm um `M` e assim por diante.
Há duas colunas de status na saída: a coluna da esquerda indica o status da área de _stage_ e a coluna da direita indica o status do diretório de trabalho.
No exemplo anterior, o arquivo `README` foi modificado no diretório de trabalho mas ainda não foi para o _stage_, enquanto o arquivo `lib/simplegit.rb` foi modificado e foi para o _stage_.
O arquivo `Rakefile` foi modificado, foi para o _stage_ e foi modificado de novo, de maneira que há alterações para ele tanto no estado preparado quanto no estado não-preparado.

[[r_ignoring]]
==== Ignorando Arquivos

Frequentemente você terá uma classe de arquivos que não quer que sejam adicionados automaticamente pelo Git e nem mesmo que ele os mostre como não-rastreados.
Geralmente, esses arquivos são gerados automaticamente, tais como arquivos de _log_ ou arquivos produzidos pelo seu sistema de compilação (_build_).
Nesses casos, você pode criar um arquivo chamado `.gitignore`, contendo uma lista de padrões de nomes de arquivo que devem ser ignorados.(((ignoring files)))
Aqui está um exemplo de arquivo `.gitignore`:

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

A primeira linha diz ao Git para ignorar todos os arquivos que terminem com ``.o'' ou ``.a'' – arquivos objeto ou de arquivamento, que podem ser produtos do processo de compilação.
A segunda linha diz ao Git para ignorar todos os arquivos cujo nome termine com um til (`~`), que é usado por muitos editores de texto, como o Emacs, para marcar arquivos temporários.
Você também pode incluir diretórios `log`, `tmp` ou `pid`; documentação gerada automaticamente; e assim por diante.
Configurar um arquivo `.gitignore`, antes de você começar um repositório, geralmente é uma boa ideia para que você não inclua acidentalmente em seu repositório Git arquivos que você não quer.

As regras para os padrões que podem ser usados no arquivo `.gitignore` são as seguintes:

*  Linhas em branco ou começando com `#` são ignoradas.
*  Os padrões que normalmente são usados para nomes de arquivos funcionam.
*  Você pode iniciar padrões com uma barra (`/`) para evitar recursividade.
*  Você pode terminar padrões com uma barra (`/`) para especificar um diretório.
*  Você pode negar um padrão ao fazê-lo iniciar com um ponto de exclamação (`!`).

Padrões de nome de arquivo são como expressões regulares simplificadas usadas em ambiente _shell_.
Um asterisco (`*`) casa com zero ou mais caracteres; `[abc]` casa com qualquer caracter dentro dos colchetes (neste caso, a, b ou c); um ponto de interrogação (`?`) casa com um único caracter qualquer; e caracteres entre colchetes separados por hífen (`[0-9]`) casam com qualquer caracter entre eles (neste caso, de 0 a 9).
Você também pode usar dois asteriscos para criar uma expressão que case com diretórios aninhados; `a/**/z` casaria com `a/z`, `a/b/z`, `a/b/c/z`, e assim por diante.

Aqui está outro exemplo de arquivo `.gitignore`:

[source]
----
# ignorar arquivos com extensão .a
*.a

# mas rastrear o arquivo lib.a, mesmo que você esteja ignorando os arquivos .a acima
!lib.a

# ignorar o arquivo TODO apenas no diretório atual, mas não em subdir/TODO
/TODO

# ignorar todos os arquivos no diretório build/
build/

# ignorar doc/notes.txt, mas não doc/server/arch.txt
doc/*.txt

# ignorar todos os arquivos .pdf no diretório doc/
doc/**/*.pdf
----

[TIP]
====
O GitHub mantém uma lista bem abrangente com bons exemplos de arquivo `.gitignore` para vários projetos e linguagens em https://github.com/github/gitignore[], se você quiser um ponto de partida para o seu projeto.
====

[NOTE]
====
Em casos simples, um repositório deve ter um único arquivo `.gitignore` em seu diretório raiz, o qual é aplicado recursivamente a todo o repositório.
Contudo, também é possível ter arquivos `.gitignore` adicionais em subdiretórios.
As regras definidas nesses `.gitignore` internos se aplicam somente aos arquivos contidos no diretório em que eles estão localizados.
(O repositório do kernel do Linux tem 206 arquivos `.gitignore`.)

Está fora do escopo deste livro explicar os detalhes de múltiplos arquivos `.gitignore`; veja `man gitignore` para mais informações.
====

[[r_git_diff_staged]]
==== Visualizando suas Alterações Preparadas e Não-Preparadas

Se o comando `git status` for vago demais para você -- você quer saber exatamente o que você alterou, não apenas quais arquivos foram alterados -- você pode usar o comando `git diff`.(((git commands, diff)))
Nós explicaremos o `git diff` em detalhes mais tarde, mas provavelmente você vai usá-lo com maior frequência para responder a essas duas perguntas: O que você alterou mas ainda não mandou para o _stage_ (estado preparado)?
E o que está no _stage_, pronto para o _commit_?
Apesar de o `git status` responder a essas perguntas de forma genérica, listando os nomes dos arquivos, o `git diff` exibe exatamente as linhas que foram adicionadas e removidas -- o _patch_, como costumava se chamar.

Digamos que você altere o arquivo `README` e o mande para o _stage_ e então altere o arquivo `CONTRIBUTING.md` sem mandá-lo para o _stage_.
Se você executar o comando `git status`, você verá mais uma vez alguma coisa como o seguinte:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Para ver o que você alterou mas ainda não mandou para o _stage_, digite o comando `git diff` sem nenhum argumento:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

Esse comando compara o que está no seu diretório de trabalho com o que está no _stage_.
O resultado permite que você saiba quais alterações você fez que ainda não foram mandadas para o _stage_.

Se você quiser ver as alterações que você mandou para o _stage_ e que entrarão no seu próximo _commit_, você pode usar `git diff --staged`.
Este comando compara as alterações que estão no seu _stage_ com o seu último _commit_:

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----

É importante notar que o `git diff` sozinho não mostra todas as alterações feitas desde o seu último _commit_ -- apenas as alterações que ainda não estão no _stage_ (não-preparado).
Isso pode ser confuso porque, se você já tiver mandado todas as suas alterações para o _stage_, a saída do `git diff` vai ser vazia.

Um outro exemplo: se você mandar o arquivo `CONTRIBUTING.md` para o _stage_ e então alterá-lo, você pode usar o `git diff` para ver as alterações no arquivo que estão no _stage_ e também as que não estão.
Se o nosso ambiente se parecer com isso:

[source,console]
----
$ git add CONTRIBUTING.md
$ echo '# test line' >> CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Agora você poderá usar o `git diff` para ver o que ainda não foi mandado para o _stage_:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line
----

e `git diff --cached` para ver o que você já mandou para o _stage_  até agora (`--staged` e `--cached` são sinônimos):

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

[NOTE]
.Git Diff em uma Ferramenta Externa
====
Nós continuaremos usando o comando `git diff` de várias maneiras pelo resto do livro.
Há outra maneira de ver essas diferenças, se você preferir usar uma ferramenta gráfica ou um programa externo.
Se você executar `git difftool` em vez de `git diff`, você pode ver qualquer dessas diferenças em um software como emerge, vimdiff e muitos outros (incluindo produtos comerciais).
Execute `git difftool --tool-help` para ver o que há disponível em seu sistema.
====

[[r_committing_changes]]
==== Committing Your Changes

Now that your staging area is set up the way you want it, you can commit your changes.
Remember that anything that is still unstaged – any files you have created or modified that you haven't run `git add` on since you edited them – won't go into this commit.
They will stay as modified files on your disk.
In this case, let's say that the last time you ran `git status`, you saw that everything was staged, so you're ready to commit your changes.(((git commands, status)))
The simplest way to commit is to type `git commit`:(((git commands, commit)))

[source,console]
----
$ git commit
----

Doing so launches your editor of choice.
(This is set by your shell's `$EDITOR` environment variable – usually vim or emacs, although you can configure it with whatever you want using the `git config --global core.editor` command as you saw in <<ch01-introduction#ch01-introduction>>).(((editor, changing default)))(((git commands, config)))

The editor displays the following text (this example is a Vim screen):

[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
#
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----

You can see that the default commit message contains the latest output of the `git status` command commented out and one empty line on top.
You can remove these comments and type your commit message, or you can leave them there to help you remember what you're committing.
(For an even more explicit reminder of what you've modified, you can pass the `-v` option to `git commit`.
Doing so also puts the diff of your change in the editor so you can see exactly what changes you're committing.)
When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out).

Alternatively, you can type your commit message inline with the `commit` command by specifying it after a `-m` flag, like this:

[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

Now you've created your first commit!
You can see that the commit has given you some output about itself: which branch you committed to (`master`), what SHA-1 checksum the commit has (`463dc4f`), how many files were changed, and statistics about lines added and removed in the commit.

Remember that the commit records the snapshot you set up in your staging area.
Anything you didn't stage is still sitting there modified; you can do another commit to add it to your history.
Every time you perform a commit, you're recording a snapshot of your project that you can revert to or compare to later.

==== Skipping the Staging Area

(((staging area, skipping)))
Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow.
If you want to skip the staging area, Git provides a simple shortcut.
Adding the `-a` option to the `git commit` command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the `git add` part:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

Notice how you don't have to run `git add` on the `CONTRIBUTING.md` file in this case before you commit.
That's because the `-a` flag includes all changed files.
This is convenient, but be careful; sometimes this flag will cause you to include unwanted changes.

[[r_removing_files]]
==== Removing Files

(((files, removing)))
To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit.
The `git rm` command does that, and also removes the file from your working directory so you don't see it as an untracked file the next time around.

If you simply remove the file from your working directory, it shows up under the ``Changed but not updated'' (that is, _unstaged_) area of your `git status` output:

[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use "git add" and/or "git commit -a")
----

Then, if you run `git rm`, it stages the file's removal:

[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    PROJECTS.md
----

The next time you commit, the file will be gone and no longer tracked.
If you modified the file and added it to the index already, you must force the removal with the `-f` option.
This is a safety feature to prevent accidental removal of data that hasn't yet been recorded in a snapshot and that can't be recovered from Git.

Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area.
In other words, you may want to keep the file on your hard drive but not have Git track it anymore.
This is particularly useful if you forgot to add something to your `.gitignore` file and accidentally staged it, like a large log file or a bunch of `.a` compiled files.
To do this, use the `--cached` option:

[source,console]
----
$ git rm --cached README
----

You can pass files, directories, and file-glob patterns to the `git rm` command.
That means you can do things such as:

[source,console]
----
$ git rm log/\*.log
----

Note the backslash (`\`) in front of the `*`.
This is necessary because Git does its own filename expansion in addition to your shell's filename expansion.
This command removes all files that have the `.log` extension in the `log/` directory.
Or, you can do something like this:

[source,console]
----
$ git rm \*~
----

This command removes all files whose names end with a `~`.

[[r_git_mv]]
==== Moving Files

(((files, moving)))
Unlike many other VCS systems, Git doesn't explicitly track file movement.
If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file.
However, Git is pretty smart about figuring that out after the fact – we'll deal with detecting file movement a bit later.

Thus it's a bit confusing that Git has a `mv` command.
If you want to rename a file in Git, you can run something like:

[source,console]
----
$ git mv file_from file_to
----

and it works fine.
In fact, if you run something like this and look at the status, you'll see that Git considers it a renamed file:

[source,console]
----
$ git mv README.md README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
----

However, this is equivalent to running something like this:

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----

Git figures out that it's a rename implicitly, so it doesn't matter if you rename a file that way or with the `mv` command.
The only real difference is that `git mv` is one command instead of three – it's a convenience function.
More importantly, you can use any tool you like to rename a file, and address the add/rm later, before you commit.
