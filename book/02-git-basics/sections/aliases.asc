[[r_git_aliases]]
=== Apelidos Git

(((aliases)))
Antes de finalizarmos o capítulo básico sobre o Git, temos apenas uma pequena dica que pode tornar sua experiência com o Git mais simples, fácil e familiar: apelidos(aliases).
Não iremos nos referir a eles ou assumir que você já os tenha usado mais adiante neste livro, porém você provavelmente deve saber como usá-los.

Git não infere automaticamente seu comando se você digitá-lo parcialmente. Se você não quiser digitar o texto inteiro de cada comando, você pode facilmente configurar um apelido para cada comando usando `git config`.(((git commands, config)))

Aqui estão alguns exemplos que talvez você queira configurar:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

Isto significa que, por exemplo, ao invés de digitar `git commit`, você só precisa digitar `git ci`. A medida que você for usando o Git, provavelmente usará outros comandos com frequência também. Então, não hesite em criar novos apelidos.

Esta técnica também pode ser muito útil na criação de comandos que você acredita que deveriam existir. Por exemplo, para corrigir o problema de usabilidade que você encontrou em um arquivo enquanto o removia do _staging_, você pode adicionar seu próprio apelido essa ação ao Git: 


[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

Isto faz dos dois comandos a seguir equivalentes: 

[source,console]
----
$ git unstage fileA
$ git reset HEAD -- fileA
----

Este parece um pouco mais claro. Também é comum adicionar ao comando `last` algo como:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

Deste jeito, você pode ver o último _commit_ mais facilmente:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

Como você pode ver, o Git simplesmente substitui o novo comando por qualquer apelido que você escolher. Entretanto, talvez você queira executar um comando externo em vez de um subcomando Git. Nesse caso, você inicia o comando com um caracter de exclamação (`!`). Isto é muito útil se você escreve suas próprias _tools_ que trabalham com um repositório Git. Podemos demonstrar isso apelidando `git visual` com `gitk`:

[source,console]
----
$ git config --global alias.visual '!gitk'
----
